
# Shamir's Secret Sharing
# This cryptosystem is based on the following theorem:
# Suppose we have a commutative ring R; and points x__i, y__i;where i = 1, 2, () .. (), d; and all the x__i; are distinct. Then, there is a unique polynomial f in R[x], deg(f) <= d - 1; that passes through d; given points. Shamir's Secret Sharing works by encrypting a secret via this principle. A secret can be encrypted by d; keys; you need all d;keys in order to decrypt the secret.
# 
# We construct a random polynomial of degree d; such that f(0); contains our secret. This is very easy since the secret is just the constant term of the polynomial and the coefficients on the other terms can be chosen at random. This polynomial is used to generate the keys as pairs x__i, f(x__i);and then those pairs given out to people.
# 
# To decrypt using the d; keys, construct a Lagrange polynomial. The theorem above says that there's only one polynomial of degree <=d; that passes through all of those points. The constructed Lagrange polynomial will form a degree d; polynomial; it follows from the theorem that it must be the same secret polynomial. 
# 
# Of course, this is best done when R; is a field for which the inverses are easy to calculate. To keep the numbers relatively small, we can work with congruence classes in mod p; where 1 < p; is prime (a finite field). This lets us use the extended Euclidean algorithm to quickly calculate the inverses modulo p;.
kernelopts(assertlevel=2):
ThreshholdGen := proc(secret::integer,numOfKeysNeeded::posint, modulus::posint:=157) :: list;
  description 
  "Generates a Lagrange polynomial and creates `numOfKeysNeeded` keys as ordered pairs in Z_modulus^2 that uniquely determine the polynomial.",
  "Returns a list A, where A[1] is a list containing the keys (the keys are lists of length 2), and A[2] is the generated Lagrange polynomial.";
  local i,f,R,L,K,randKey;

  # Generate the Lagrange polynomial, f. The constant term of the Largrange
  # polynomial will be the secret.
  R := rand(0..modulus);
  f := secret mod modulus;
  for i from 1 to numOfKeysNeeded-1 do
    f := f + R()*x^i;
  od;

  # Start to generate the keys for the sharing secret scheme.
  # We first generate the x-coordinates for the keys.
  L := Array(1..numOfKeysNeeded);
  R := rand(-ceil(modulus/2)..floor(modulus/2));
  for i from 1 to numOfKeysNeeded do
    # Make sure we are not duplicating keys.
    do
      randKey := R() mod modulus;
    until not randKey in L;
    L[i] := [randKey, 0];
  od;

  # Using the Lagrange polynomial, f, to generate the y-coordinates to create
  # the keys.
  for i from 1 to numOfKeysNeeded do
    # If we want it to be in hex, use this line instead:
    #   L[i] := [convert(L[i],hex),convert(eval(f,x=L[i]) mod modulus,hex)];
    L[i] := [L[i][1],eval(f,x=L[i][1]) mod modulus];
  od;

  return [L,f mod modulus];
end proc:

ExtendedGCDAlgo := proc(a::integer, b::integer) :: list;
  description "Returns integers x,y in a list such that a*x+b*y = gcd(a,b), where a > b";
  local q,r,x,y,i;
  i := 0;
  x := Array(1..3);
  y := Array(1..3);
  r := Array(1..3);
  q := Array(1..3);

  r[1] := max(a,b); r[2] := min(a,b);
  x[1] := 1; y[1] := 0;
  x[2] := 0; y[2] := 1;
  do
    i := i + 1;
    # perform division and update rules
    r[3] := r[1] mod r[2];
    q[3] := floor(r[1] / r[2]);

    x[3] := x[1] - q[3]*x[2];
    y[3] := y[1] - q[3]*y[2];

    # shift everything up
    r[1] := r[2]; r[2] := r[3];
    q[1] := q[2]; q[2] := q[3];
    x[1] := x[2]; x[2] := x[3];
    y[1] := y[2]; y[2] := y[3];
  until r[2] = 0;
  return [x[1],y[1]];
end proc:

GetInverse := proc(a::integer,type::integer,modulus::integer := 1) :: rational;
  # type:
  #    0 - rational number
  #    1 - congruence mod
  local inverseOfa, i, m, k;
  if a = 0 then return -50;
  elif type = 0 then return 1/a;
  else
    if gcd(a,modulus) <> 1 then return -50; fi;

    # Finding the inverse of a in the field Z_modulus
    return ExtendedGCDAlgo(modulus, a mod modulus)[2];
  fi:
end proc:

LagrangePolyGen := proc(L::list, numKeys::posint, modulus::posint := 157, type::integer :=1) :: polynom(integer, x);
  description 
    "Generates and returns a univariate Lagrange polynomial that goes through the points given in list L.",
    "If type=0, then the polynomial will be in the polynomial ring R[x]",
    "If type=1 or otherwise, then the polynomial will be in the polynomial ring Z_modulus[x]";
  local f,g,h,i,k;
  f := 0;
  
  for i from 1 to numKeys do
    # Make sure this term cancels out for any other value that is inputted except for
    # the point L[i], in which case the term should become the y-coordinate of L[i]: L[i][2].

    # For any x-value other than the one in L[i], make the term be 0. Skip of L[i] in the
    # formation of this product.
    g := L[i][2]*product((x-L[k][1]),k=1..i-1);
    g := g * product((x-L[k][1]),k=i+1..numKeys);
    
    # If it is at L[i], those other terms meant to cancel the other x-values have to be
    # multiplied by the inverse in order to get the desired value, L[i][2].
    h := product((L[i][1]-L[k][1]),k=1..i-1);
    h := h*product((L[i][1]-L[k][1]),k=i+1..numKeys);
    if type <> 0 then
      h := GetInverse(h,1,modulus);
    fi:
    
    # Add this term on to the polynomial we are generating, f.
    if h = 0 then return 0; fi;
    # print(factor(g)); print(factor(h));
    if type=0 then
      f := f + g/h;
    else
      f := (f + g*h) mod modulus;
    fi;
  od;
  
  return f;
end proc:
keys := 15: secret := 243542:
modulus := prevprime(2^(127)-1);
# This is the worst-case number of divisions needed to find the Bezout constants.
floor((5*log[10](modulus)));
# Generate keys using the function, then set up a way to plot the keys to see how distributed they are.
K := ThreshholdGen(secret,keys,modulus):
k := K[2] mod modulus:
h := a -> eval(k, x=a):
K := [seq(K[1][i],i=1..keys)]:
# Write a procedure to get the list index in order to use the map function.
sel_ind := proc(L::list, i::posint)
  return L[i];
end proc:
dataplot(map(sel_ind,K,1),map(sel_ind,K,2),style=point,
         title="Plot of the locations for the generated keys");
# As a raw amount, ((m^(2)) ? (k)); is the amount of possible key-share distributions of k keys. This is because the keys are of the form (x,y), and each of the x- and y-coordinates have m possible values inside the field Z_m; so there are m^2 possible keys
binomial(modulus^2,keys);
# Decrypting the secret by constructing the Lagrange polynomial. The secret will be the constant term of the Lagrange polynomial (so evaluate f(0)).
f := LagrangePolyGen(K,keys,modulus,1):
f := simplify(f) mod modulus:
M := seq(eval(f,x=i) mod modulus,i=0..nops(K));
N := seq(h(i) mod modulus,i=0..nops(K));
